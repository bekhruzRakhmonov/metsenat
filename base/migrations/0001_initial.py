# Generated by Django 4.1.1 on 2022-10-01 17:20

import base.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="OrgApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fullname",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Full name"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=13,
                        validators=[base.validators.PhoneNumberValidator()],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "payment_amount",
                    models.FloatField(
                        validators=[base.validators.payment_amount_validator],
                        verbose_name="Payment Amount",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("verified", "Verified"),
                            ("rejected", "Rejected"),
                            ("new", "New"),
                        ],
                        default="pending",
                        max_length=8,
                        verbose_name="Status",
                    ),
                ),
                (
                    "org_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Organisation name"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PhysicalApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fullname",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Full name"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=13,
                        validators=[base.validators.PhoneNumberValidator()],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "payment_amount",
                    models.FloatField(
                        validators=[base.validators.payment_amount_validator],
                        verbose_name="Payment Amount",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("verified", "Verified"),
                            ("rejected", "Rejected"),
                            ("new", "New"),
                        ],
                        default="pending",
                        max_length=8,
                        verbose_name="Status",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Sponsor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fullname",
                    models.CharField(max_length=255, verbose_name="Full name"),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=13,
                        validators=[base.validators.PhoneNumberValidator()],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        choices=[("bachelor", "Bachelor"), ("master", "Master")],
                        default="bachelor",
                        max_length=8,
                        verbose_name="Choose a degree",
                    ),
                ),
                (
                    "college",
                    models.CharField(
                        choices=[
                            ("INHA", "INHA"),
                            ("WIUT", "WIUT"),
                            ("TDIU", "TDIU"),
                            ("MDIST", "MDIST"),
                        ],
                        max_length=255,
                        verbose_name="Choose a college",
                    ),
                ),
                (
                    "tution_fee",
                    models.FloatField(
                        validators=[base.validators.payment_amount_validator],
                        verbose_name="Tution fee",
                    ),
                ),
                (
                    "unpaid_tution_fee",
                    models.FloatField(
                        validators=[base.validators.payment_amount_validator],
                        verbose_name="Unpaid Tution fee",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TransactionTracker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        null=True, validators=[base.validators.payment_amount_validator]
                    ),
                ),
                (
                    "sponsor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transaction_sponsor",
                        to="base.sponsor",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transaction_student",
                        to="base.student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[base.validators.UsernameValidator()],
                        verbose_name="Username",
                    ),
                ),
                (
                    "fullname",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Full name"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=13,
                        null=True,
                        validators=[base.validators.PhoneNumberValidator()],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
